<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of RuSun</title>
  
  <subtitle>\begin {array}{c} \mathfrak {One Problem Is Difficult} \\\\ \mathfrak {Because You Don&#39;t Know} \\\\ \mathfrak {Why It Is Diffucult} \end {array}</subtitle>
  <link href="https://rusunoi.github.io/rss.xml" rel="self"/>
  
  <link href="https://rusunoi.github.io/"/>
  <updated>2024-10-10T13:25:46.000Z</updated>
  <id>https://rusunoi.github.io/</id>
  
  <author>
    <name>RuSun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GYM104491B Standard Problem</title>
    <link href="https://rusunoi.github.io/post/GYM104491B/"/>
    <id>https://rusunoi.github.io/post/GYM104491B/</id>
    <published>2024-10-10T13:25:46.000Z</published>
    <updated>2024-10-10T13:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/104491/problem/B">B. Standard Problem</a></p><span id="more"></span><p>注意计算的方案数是选择哪些区间的方案数，而不是构成的不下降序列的方案数，考虑对于每一种选择区间的方案确定一种构成序列的方案并令只能这样选择数。我们令每一个区间选择的数为当前能选择的最小的数，即若当前最后一个数 $k$ 有 $k \le l _ i$ 那么选择 $l _ i$ ，若 $k &gt; l _ i$ 那么选择 $k$ ，那么更新的时候就会有 $[1, l _ i]$ 对 $l _ i$ 有贡献， $[l _ i + 1, r _ i]$ 的每一个数对自己有贡献。维护区间最大值和最大值个数，需要实现单点修改和区间加。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    L v, tag;</span><br><span class="line">    <span class="keyword">int</span> l, r, c;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span> <span class="params">(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> r = m, <span class="keyword">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].l = l, tr[x].r = r;</span><br><span class="line">    tr[x].v = <span class="number">0</span>, tr[x].c = l == <span class="number">0</span>, tr[x].tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(l, mid, x &lt;&lt; <span class="number">1</span>), <span class="built_in">build</span>(mid + <span class="number">1</span>, r, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span> <span class="params">(Node &amp;x, Node l, Node r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x.l = l.l, x.r = r.r;</span><br><span class="line">    <span class="keyword">if</span> (l.v == r.v) x.v = l.v, x.c = (l.c + r.c) % mod;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l.v &gt; r.v) x.v = l.v, x.c = l.c;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l.v &lt; r.v) x.v = r.v, x.c = r.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, L k)</span> </span>&#123; tr[x].v += k, tr[x].tag += k; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x &lt;&lt; <span class="number">1</span>, tr[x].tag), <span class="built_in">add</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, tr[x].tag);</span><br><span class="line">    tr[x].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].l &gt;= l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> tr[x];</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(l, r, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(l, r, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    Node res; <span class="built_in">pushup</span>(res, <span class="built_in">query</span>(l, r, x &lt;&lt; <span class="number">1</span>), <span class="built_in">query</span>(l, r, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span> <span class="params">(<span class="keyword">int</span> t, L v, <span class="keyword">int</span> c, <span class="keyword">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].l == tr[x].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x].v = v, tr[x].c = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &lt;= mid) <span class="built_in">change</span>(t, v, c, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; mid) <span class="built_in">change</span>(t, v, c, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(tr[x], tr[x &lt;&lt; <span class="number">1</span>], tr[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, L k, <span class="keyword">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].l &gt; r || tr[x].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].l &gt;= l &amp;&amp; tr[x].r &lt;= r)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(x, k);</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="built_in">modify</span>(l, r, k, x &lt;&lt; <span class="number">1</span>), <span class="built_in">modify</span>(l, r, k, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(tr[x], tr[x &lt;&lt; <span class="number">1</span>], tr[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r, v; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;v);</span><br><span class="line">            Node t = <span class="built_in">query</span>(<span class="number">0</span>, l);</span><br><span class="line">            t.v += v;</span><br><span class="line">            <span class="built_in">change</span>(l, t.v, t.c);</span><br><span class="line">            <span class="keyword">if</span> (l ^ r) <span class="built_in">modify</span>(l + <span class="number">1</span>, r, v);</span><br><span class="line">        &#125;</span><br><span class="line">        Node res = <span class="built_in">query</span>(<span class="number">0</span>, m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %d\n&quot;</span>, res.v, res.c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/104491/problem/B&quot;&gt;B. Standard Problem&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="DP" scheme="https://rusunoi.github.io/tags/DP/"/>
    
    <category term="线段树" scheme="https://rusunoi.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>dpV Subtree</title>
    <link href="https://rusunoi.github.io/post/ATdpV/"/>
    <id>https://rusunoi.github.io/post/ATdpV/</id>
    <published>2024-09-12T08:56:43.000Z</published>
    <updated>2024-09-12T08:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT_dp_v">LuoGu: Subtree</a></p><p><a href="https://atcoder.jp/contests/dp/tasks/dp_v">AT: V - Subtree</a></p><span id="more"></span><p>换根DP。其中需要求父节点所有儿子除了当前节点的贡献，但是很恶心的是模数 $m$ 是给定的且不是质数不能用逆元，所以用前后缀积处理。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, f[N], g[N], h[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : e[u]) <span class="keyword">if</span> (v ^ fa)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">        f[u] = f[u] * (f[v] + <span class="number">1ll</span>) % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e[u].<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; <span class="built_in">a</span>(e[u].<span class="built_in">size</span>()), <span class="built_in">b</span>(e[u].<span class="built_in">size</span>());</span><br><span class="line">    a.<span class="built_in">front</span>() = (e[u].<span class="built_in">front</span>() == fa ? <span class="number">0</span> : f[e[u].<span class="built_in">front</span>()]) + <span class="number">1</span>;</span><br><span class="line">    b.<span class="built_in">back</span>() = (e[u].<span class="built_in">back</span>() == fa ? <span class="number">0</span> : f[e[u].<span class="built_in">back</span>()]) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; e[u].<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (e[u][i] == fa) a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> a[i] = a[i - <span class="number">1</span>] * (f[e[u][i]] + <span class="number">1ll</span>) % m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = e[u].<span class="built_in">size</span>() - <span class="number">2</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (e[u][i] == fa) b[i] = b[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> b[i] = b[i + <span class="number">1</span>] * (f[e[u][i]] + <span class="number">1ll</span>) % m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e[u].<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (e[u][i] ^ fa)</span><br><span class="line">    &#123;</span><br><span class="line">        h[e[u][i]] = (h[u] + <span class="number">1ll</span>) * (i ? a[i - <span class="number">1</span>] : <span class="number">1</span>) % m * (i &lt; e[u].<span class="built_in">size</span>() - <span class="number">1</span> ? b[i + <span class="number">1</span>] : <span class="number">1</span>) % m ;</span><br><span class="line">        g[e[u][i]] = ((L)g[u] + f[e[u][i]] - h[e[u][i]]) % m;</span><br><span class="line">        <span class="built_in">dfs2</span>(e[u][i], u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b), e[a].<span class="built_in">pb</span>(b), e[b].<span class="built_in">pb</span>(a);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    g[<span class="number">1</span>] = f[<span class="number">1</span>], h[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (g[i] + m) % m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/AT_dp_v&quot;&gt;LuoGu: Subtree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_v&quot;&gt;AT: V - Subtree&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="换根DP" scheme="https://rusunoi.github.io/tags/%E6%8D%A2%E6%A0%B9DP/"/>
    
  </entry>
  
  <entry>
    <title>CF1986G2 Permutation Problem (Hard Version)</title>
    <link href="https://rusunoi.github.io/post/CF1986G2/"/>
    <id>https://rusunoi.github.io/post/CF1986G2/</id>
    <published>2024-07-08T09:00:17.000Z</published>
    <updated>2024-07-08T09:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF1986G2">LuoGu: CF1986G2 Permutation Problem (Hard Version)</a></p><p><a href="https://codeforces.com/problemset/problem/1986/G2">CF: G2. Permutation Problem (Hard Version)</a></p><span id="more"></span><p>将 $\frac {p _ i} i$ 约分得到 $\frac {a _ i} {b _ i}$ ，那么 $[ij | p _ i p _ j] &#x3D; [b _ i b _ j | a _ i a _ j] &#x3D; [b _ i | a _ j \wedge b _ j | a _ i]$ ，考虑枚举 $b _ i$ ，找出相同 $b _ i$ 的所有 $a _ i$ ，统计它们的约数，放进一个桶里面，这一部分每一个数只出现一次，复杂度为 $O(n \ln n)$ ；再枚举 $b _ i$ 的倍数 $a _ j$ ，结合上面的桶统计答案，这一部分每一个数在 $b _ i$ 为其约数时出现一次，复杂度为 $O(n \ln n)$ 。</p><p>总的思路是将 $[ij | p _ i p _ j]$ 拆开统计实现复杂度的降低。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">typedef</span> vector &lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, w[N], v[N], cnt[N];</span><br><span class="line">VI f[N], x[N], y[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a ? <span class="built_in">gcd</span>(b % a, a) : b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; N; ++j)</span><br><span class="line">            f[i * j].<span class="built_in">pb</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; w[i], v[i] = i;</span><br><span class="line">            <span class="keyword">int</span> d = <span class="built_in">gcd</span>(w[i], v[i]);</span><br><span class="line">            w[i] /= d, v[i] /= d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            x[i].<span class="built_in">clear</span>(), y[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            x[w[i]].<span class="built_in">pb</span>(i), y[v[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">        L res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t : y[i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> s : f[w[t]])</span><br><span class="line">                    ++cnt[s];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k : x[i * j])</span><br><span class="line">                    res += cnt[v[k]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t : y[i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> s : f[w[t]])</span><br><span class="line">                    --cnt[s];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            res -= v[i] == <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; (res &gt;&gt; <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/CF1986G2&quot;&gt;LuoGu: CF1986G2 Permutation Problem (Hard Version)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1986/G2&quot;&gt;CF: G2. Permutation Problem (Hard Version)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="数学" scheme="https://rusunoi.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>P6669 [清华集训2016] 组合数问题</title>
    <link href="https://rusunoi.github.io/post/P6669/"/>
    <id>https://rusunoi.github.io/post/P6669/</id>
    <published>2024-07-06T08:30:34.000Z</published>
    <updated>2024-07-06T08:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P6669">P6669 [清华集训2016] 组合数问题</a></p><span id="more"></span><p>用卢卡斯定理，满足条件当且仅当在 $k$ 进制下 $i$ 的某一位小于 $j$ ，考虑计算 $i$ 的每一位均小于 $j$ 的种数，那么可以使用数位DP。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">70</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>, inv2 = <span class="number">5e8</span> + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">typedef</span> vector &lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line">L n, m;</span><br><span class="line">VI a, b;</span><br><span class="line"><span class="keyword">int</span> k, f[N][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> t, <span class="keyword">bool</span> p, <span class="keyword">bool</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!~t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (~f[t][p][q]) <span class="keyword">return</span> f[t][p][q];</span><br><span class="line">    <span class="keyword">int</span> x = p ? a[t] : k - <span class="number">1</span>, y = q ? b[t] : k - <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i &amp;&amp; j &lt;= y; ++j)</span><br><span class="line">            res = (res + <span class="built_in">dfs</span>(t - <span class="number">1</span>, p &amp;&amp; i == x, q &amp;&amp; j == y)) % mod;</span><br><span class="line">    <span class="keyword">return</span>  f[t][p][q] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m; m = <span class="built_in">min</span>(n, m);</span><br><span class="line">        a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">int</span> res = ((m + <span class="number">1</span>) % mod * ((m + <span class="number">2</span>) % mod) % mod * inv2 + (m + <span class="number">1</span>) % mod * ((n - m) % mod)) % mod;</span><br><span class="line">        <span class="keyword">for</span> (; n; n /= k) a.<span class="built_in">pb</span>(n % k);</span><br><span class="line">        <span class="keyword">for</span> (; m; m /= k) b.<span class="built_in">pb</span>(m % k);</span><br><span class="line">        b.<span class="built_in">resize</span>(a.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">        cout &lt;&lt; (res - <span class="built_in">dfs</span>(a.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>) + mod) % mod &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P6669&quot;&gt;P6669 [清华集训2016] 组合数问题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="组合数学" scheme="https://rusunoi.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数位DP" scheme="https://rusunoi.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>LOJ2143. 「SHOI2017」组合数问题</title>
    <link href="https://rusunoi.github.io/post/LOJ2143/"/>
    <id>https://rusunoi.github.io/post/LOJ2143/</id>
    <published>2024-07-05T09:17:25.000Z</published>
    <updated>2024-07-05T09:17:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/p/2143">#2143. 「SHOI2017」组合数问题</a></p><span id="more"></span><p>求 $\left( \sum_{i &#x3D; 0}^\infty \mathrm{C}_{nk}^{ik + r} \right) \bmod p$ 。</p><p>处理一下式子，写成 $\sum _ {i &#x3D; 1} ^ {nk} \binom {nk} {i} [i \equiv r \pmod p]$ ，即从 $nk$ 里面选择 $i$ 个物品，其中 $i$ 满足一定条件。那么不妨依此考虑每一个物品是否被选择，记 $f _ {i, j}$ 表示当前考虑第 $i$ 个物品，选择了 $j$ 个数，而 $j$ 只需考虑模 $k$ 的余数，有转移 $f _ {i, j} &#x3D; f _ {i - 1, j - 1} + f _ {i - 1, j}$ 。而 $nk$ 很大，可以矩阵优化，复杂度为 $O(n ^ 3 \log k)$ 。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m, w[N][N];</span><br><span class="line">    <span class="built_in">Matrix</span> (<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        n = x, m = y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                w[i][j] = i == j ? k : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span>* (Matrix x, Matrix y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(x.n, y.m, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; res.m; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; x.m; ++k)</span><br><span class="line">                    res.w[i][j] = (res.w[i][j] + (L)x.w[i][k] * y.w[k][j]) % p;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span>^ (Matrix b, L k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Matrix <span class="title">res</span><span class="params">(b.n, b.m, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, b = b * b)</span><br><span class="line">            <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * b;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, r;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p &gt;&gt; k &gt;&gt; r;</span><br><span class="line">    <span class="function">Matrix <span class="title">A</span><span class="params">(<span class="number">1</span>, k, <span class="number">0</span>)</span>, <span class="title">B</span><span class="params">(k, k, <span class="number">0</span>)</span></span>;</span><br><span class="line">    A.w[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        ++B.w[i][i], ++B.w[i][(i + <span class="number">1</span>) % k];</span><br><span class="line">    cout &lt;&lt; (A * (B ^ (L)n * k)).w[<span class="number">0</span>][r];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://loj.ac/p/2143&quot;&gt;#2143. 「SHOI2017」组合数问题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="组合数学" scheme="https://rusunoi.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="矩阵加速" scheme="https://rusunoi.github.io/tags/%E7%9F%A9%E9%98%B5%E5%8A%A0%E9%80%9F/"/>
    
    <category term="省选" scheme="https://rusunoi.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>P4211 [LNOI2014]LCA</title>
    <link href="https://rusunoi.github.io/post/P4211/"/>
    <id>https://rusunoi.github.io/post/P4211/</id>
    <published>2022-11-20T01:54:15.000Z</published>
    <updated>2022-11-20T01:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4211">P4211 [LNOI2014]LCA</a></p><span id="more"></span><p>拆贡献，从小到大枚举 $i$ ，在根到 $i$ 的链上增加贡献，查询时查询根到 $i$ 的贡献和。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, mod = <span class="number">201314</span>;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> n, m, ans[N], p[N], d[N], sz[N];</span><br><span class="line"><span class="keyword">int</span> son[N], top[N], stmp, dfn[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span> <span class="keyword">int</span> op, id, z; <span class="built_in">Query</span> (<span class="keyword">int</span> _op, <span class="keyword">int</span> _id, <span class="keyword">int</span> _z) : <span class="built_in">op</span>(_op), <span class="built_in">id</span>(_id), <span class="built_in">z</span>(_z) &#123; &#125; &#125;;</span><br><span class="line">vector &lt;Query&gt; q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> LL s, t; &#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L = <span class="number">1</span>, <span class="keyword">int</span> R = n, <span class="keyword">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].s += (<span class="built_in">min</span>(r, R) - <span class="built_in">max</span>(l, L) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (L &gt;= l &amp;&amp; R &lt;= r) <span class="keyword">return</span> <span class="built_in"><span class="keyword">void</span></span>(++tr[x].t);</span><br><span class="line">    <span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(l, r, L, mid, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(l, r, mid + <span class="number">1</span>, R, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L = <span class="number">1</span>, <span class="keyword">int</span> R = n, <span class="keyword">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt;= l &amp;&amp; R &lt;= r) <span class="keyword">return</span> tr[x].s;</span><br><span class="line">    <span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL res = (<span class="built_in">min</span>(r, R) - <span class="built_in">max</span>(l, L) + <span class="number">1</span>) * tr[x].t;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) res += <span class="built_in">query</span>(l, r, L, mid, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) res += <span class="built_in">query</span>(l, r, mid + <span class="number">1</span>, R, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span> <span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = t;</span><br><span class="line">    dfn[u] = ++stmp;</span><br><span class="line">    <span class="keyword">if</span> (!son[u]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[u], t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u])</span><br><span class="line">        <span class="keyword">if</span> (v ^ p[u] &amp;&amp; v ^ son[u]) <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyPath</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; top[x] ^ <span class="number">1</span>; x = p[top[x]])</span><br><span class="line">        <span class="built_in">modify</span>(dfn[top[x]], dfn[x]);</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>, dfn[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">queryPath</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; top[x] ^ <span class="number">1</span>; x = p[top[x]])</span><br><span class="line">        res += <span class="built_in">query</span>(dfn[top[x]], dfn[x]);</span><br><span class="line">    res += <span class="built_in">query</span>(<span class="number">1</span>, dfn[x]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(p[i]), g[++p[i]].<span class="built_in">eb</span>(i);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r, z; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(l, r, z), ++l, ++r, ++z;</span><br><span class="line">        q[l - <span class="number">1</span>].<span class="built_in">eb</span>(<span class="number">-1</span>, i, z), q[r].<span class="built_in">eb</span>(<span class="number">1</span>, i, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modifyPath</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (Query j : q[i])</span><br><span class="line">            ans[j.id] += j.op * <span class="built_in">queryPath</span>(j.z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i] % mod), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4211&quot;&gt;P4211 [LNOI2014]LCA&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="树链剖分" scheme="https://rusunoi.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
    <category term="省选" scheme="https://rusunoi.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>CF785D Anton and School - 2</title>
    <link href="https://rusunoi.github.io/post/CF785D/"/>
    <id>https://rusunoi.github.io/post/CF785D/</id>
    <published>2022-11-15T13:43:36.000Z</published>
    <updated>2022-11-15T13:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF785D">LuoGu: CF785D Anton and School - 2</a></p><p><a href="https://codeforces.com/contest/785/problem/D">CF: D. Anton and School - 2</a></p><span id="more"></span><p>钦定最后一个 “(” ，再在前面选择 $i$ 个，后面选择 $i + 1$ 。用范德蒙德卷积。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, f[N], g[N], inv[N], fact[N], ifact[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i)</span><br><span class="line">        inv[i] = -(L)(mod / i) * inv[mod % i] % mod;</span><br><span class="line">    fact[<span class="number">0</span>] = ifact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i] = (L)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        ifact[i] = (L)ifact[i - <span class="number">1</span>] * inv[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? <span class="number">0</span> : (L)fact[a] * ifact[b] % mod * ifact[a - b] % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + (s[i] == <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i)</span><br><span class="line">        g[i] = g[i + <span class="number">1</span>] + (s[i] == <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; g[i]) (res += <span class="built_in">C</span>(f[i] + g[i] - <span class="number">1</span>, g[i] - <span class="number">1</span>)) %= mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (res + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/CF785D&quot;&gt;LuoGu: CF785D Anton and School - 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/785/problem/D&quot;&gt;CF: D. Anton and School - 2&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="组合数学" scheme="https://rusunoi.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>P4027 [NOI2007] 货币兑换</title>
    <link href="https://rusunoi.github.io/post/P4027/"/>
    <id>https://rusunoi.github.io/post/P4027/</id>
    <published>2022-11-12T07:53:52.000Z</published>
    <updated>2022-11-12T07:53:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4027">P4027 [NOI2007] 货币兑换</a></p><span id="more"></span><p>类似的题目有一个性质：如果在某操作是有收益的，那么一定全部操作；否则全部不操作。所以不必考虑卖出、买入多少的问题，只考虑在何处买入、卖出的问题。</p><p>记 $f _ i$ 为第 $i$ 天的最大现金值。考虑从某一天转移。如果一个 $f _ i$ 已经求出，可以直接根据 $A, B, Rate$ 算出 $A, B$ 金券的数量，记为 $x _ i, y _ i$ ，那么有转移方程 $f _ i &#x3D; \max _ {j &lt; i} x _ j A_ i + y _ j B _ i$ 。</p><p>从 $a$ 转移到 $i$ 比从 $b$ 转移到 $i$ 优 $x _ a &lt; x _ b$ 当且仅当：</p><p>$$<br>\begin {array} {c}<br>x _ a A _ i + y _ a B _ i &amp; &lt; &amp; x _ b A _ i + y _ b B _ i \\<br>(y _ b - y _ a) B _ i &amp; &lt; &amp; (x _ b - x _ a) A _ i \\<br>\frac {(y _ b - y _ a)} {(x _ b - x _ a)} &amp; &lt; &amp; \frac {B _ i} {A _ i}<br>\end {array}<br>$$</p><p>$x _ i$ 没有单调性，考虑 CDQ 分治，左侧按照 $x$ 排序，构建凸包，右侧按照 $k$ 排序查询。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e9</span>, eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">int</span> n, p[N], q[N];</span><br><span class="line"><span class="keyword">double</span> A[N], B[N], R[N], f[N], X[N], Y[N], K[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slp</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (X[i] == X[j]) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">return</span> (Y[i] - Y[j]) / (X[i] - X[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        f[l] = <span class="built_in">max</span>(f[l], f[l - <span class="number">1</span>]);</span><br><span class="line">        Y[l] = f[l] / (A[l] * R[l] + B[l]);</span><br><span class="line">        X[l] = Y[l] * R[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(l, mid);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) p[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(p + l, p + mid + <span class="number">1</span>, [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123; <span class="keyword">return</span> X[i] &lt; X[j]; &#125;);</span><br><span class="line">    <span class="built_in">sort</span>(p + mid + <span class="number">1</span>, p + r + <span class="number">1</span>, [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123; <span class="keyword">return</span> K[i] &gt; K[j]; &#125;);</span><br><span class="line">    <span class="keyword">int</span> hd = <span class="number">1</span>, tl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (hd &lt; tl &amp;&amp; <span class="built_in">slp</span>(q[tl], p[i]) &gt; <span class="built_in">slp</span>(q[tl - <span class="number">1</span>], q[tl])) --tl;</span><br><span class="line">        q[++tl] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (hd &lt; tl &amp;&amp; <span class="built_in">slp</span>(q[hd], q[hd + <span class="number">1</span>]) &gt; K[p[i]]) ++hd;</span><br><span class="line">        f[p[i]] = <span class="built_in">max</span>(f[p[i]], X[q[hd]] * A[p[i]] + Y[q[hd]] * B[p[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf&quot;</span>, &amp;n, &amp;f[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>, &amp;A[i], &amp;B[i], &amp;R[i]);</span><br><span class="line">        K[i] = -A[i] / B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4027&quot;&gt;P4027 [NOI2007] 货币兑换&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="DP" scheme="https://rusunoi.github.io/tags/DP/"/>
    
    <category term="分治" scheme="https://rusunoi.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="NOI" scheme="https://rusunoi.github.io/tags/NOI/"/>
    
  </entry>
  
  <entry>
    <title>P2375 [NOI2014] 动物园</title>
    <link href="https://rusunoi.github.io/post/P2375/"/>
    <id>https://rusunoi.github.io/post/P2375/</id>
    <published>2022-11-12T02:06:44.000Z</published>
    <updated>2022-11-12T02:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2375">P2375 [NOI2014] 动物园</a></p><span id="more"></span><p>如果没有“不重叠”的限制，即为 KMP 的 next 数组。现在要求长度不能超过串的一半，那么就反复跳 next 直到得到答案为止。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, nxt[N], f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; s[i] != s[j + <span class="number">1</span>]) j = nxt[j];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n &amp;&amp; s[i] == s[j + <span class="number">1</span>]) ++j;</span><br><span class="line">            nxt[i] = j;</span><br><span class="line">            f[i] = f[j] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; s[i] != s[j + <span class="number">1</span>]) j = nxt[j];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n &amp;&amp; s[i] == s[j + <span class="number">1</span>]) ++j;</span><br><span class="line">            <span class="keyword">while</span> (j &lt;&lt; <span class="number">1</span> &gt; i) j = nxt[j];</span><br><span class="line">            res = (L)res * (f[j] + <span class="number">1</span>) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">write</span>(res), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2375&quot;&gt;P2375 [NOI2014] 动物园&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="KMP" scheme="https://rusunoi.github.io/tags/KMP/"/>
    
    <category term="NOI" scheme="https://rusunoi.github.io/tags/NOI/"/>
    
  </entry>
  
  <entry>
    <title>P7114 [NOIP2020] 字符串匹配</title>
    <link href="https://rusunoi.github.io/post/P7114/"/>
    <id>https://rusunoi.github.io/post/P7114/</id>
    <published>2022-11-10T00:26:00.000Z</published>
    <updated>2022-11-10T00:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7114">P7114 [NOIP2020] 字符串匹配</a></p><span id="more"></span><p>考虑对于每个前缀求出循环多少次，求出 Z 函数，那么 $\frac { z _ i } i$ 即为循环次数。考虑不同的循环次数，奇偶分开讨论，对于奇数次，每增加两次循环对 C 前后出现奇数次字符的个数没有影响，只需考察这个前缀中 A 的划分即可，满足 $F(A) \le F(C)$ 即可。对于偶数次，$F(C) &#x3D; F(S)$ ，不用再单独计算，每个 $A$ 的划分都可以作为答案。枚举前缀的同时维护 $A$ 。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">10</span>, M = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">bool</span> g[<span class="number">2</span>][M];</span><br><span class="line"><span class="keyword">int</span> n, z[N], f[<span class="number">2</span>], h[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    z[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        z[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t + z[t] &gt; i) z[i] = <span class="built_in">min</span>(z[i - t], t + z[t] - i);</span><br><span class="line">        <span class="keyword">while</span> (i + z[i] &lt; n &amp;&amp; str[z[i]] == str[i + z[i]]) ++z[i];</span><br><span class="line">        <span class="keyword">if</span> (i + z[i] &gt; t + z[t]) t = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">bool</span> op, <span class="keyword">int</span> c)</span> </span>&#123; f[op] += (g[op][c] ^= <span class="number">1</span>) &amp; <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        n = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">add</span>(<span class="number">1</span>, str[i] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> x = f[<span class="number">1</span>];</span><br><span class="line">        L res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>, str[i] - <span class="string">&#x27;a&#x27;</span>), <span class="built_in">add</span>(<span class="number">1</span>, str[i] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; n - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> t = z[i + <span class="number">1</span>] / (i + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (t * (i + <span class="number">1</span>) == n) --t;</span><br><span class="line">                <span class="keyword">int</span> a = t &gt;&gt; <span class="number">1</span>, b = t - a;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= x; ++j) res += (L)a * h[j];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= f[<span class="number">1</span>]; ++j) res += (L)b * h[j];</span><br><span class="line">            &#125;</span><br><span class="line">            ++h[f[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">write</span>(res), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i)</span><br><span class="line">            --h[f[<span class="number">0</span>]], <span class="built_in">add</span>(<span class="number">0</span>, str[i] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P7114&quot;&gt;P7114 [NOIP2020] 字符串匹配&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="Z函数" scheme="https://rusunoi.github.io/tags/Z%E5%87%BD%E6%95%B0/"/>
    
    <category term="NOIP" scheme="https://rusunoi.github.io/tags/NOIP/"/>
    
  </entry>
  
  <entry>
    <title>P2444 [POI2000]病毒</title>
    <link href="https://rusunoi.github.io/post/P2444/"/>
    <id>https://rusunoi.github.io/post/P2444/</id>
    <published>2022-11-06T13:15:48.000Z</published>
    <updated>2022-11-06T13:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2444">P2444 [POI2000]病毒</a></p><span id="more"></span><p>建 AC 自动机，需要找到一个环并且永远不接触到病毒的终点位置。建 AC 自动机后，原来 Trie 树上的边已经被压缩过了，可以直接使用。有向图找环不能写假了。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">bool</span> ed; <span class="keyword">int</span> vis, p, s[<span class="number">2</span>]; &#125; tr[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str + <span class="number">1</span>), p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;s = tr[p].s[str[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!s) s = ++tot;</span><br><span class="line">        p = s;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[p].ed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tr[<span class="number">0</span>].s[i]) q.<span class="built_in">push</span>(tr[<span class="number">0</span>].s[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;s = tr[p].s[i];</span><br><span class="line">            <span class="keyword">if</span> (!s) s = tr[tr[p].p].s[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(s);</span><br><span class="line">                tr[s].p = tr[tr[p].p].s[i];</span><br><span class="line">                tr[s].ed |= tr[tr[s].p].ed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].vis == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].vis == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    tr[u].vis = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!tr[tr[u].s[i]].ed &amp;&amp; <span class="built_in">dfs</span>(tr[u].s[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    tr[u].vis = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">insert</span>();</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="built_in">dfs</span>(<span class="number">0</span>) ? <span class="string">&quot;TAK&quot;</span> : <span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2444&quot;&gt;P2444 [POI2000]病毒&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="图论" scheme="https://rusunoi.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="AC自动机" scheme="https://rusunoi.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>P2414 [NOI2011] 阿狸的打字机</title>
    <link href="https://rusunoi.github.io/post/P2414/"/>
    <id>https://rusunoi.github.io/post/P2414/</id>
    <published>2022-11-06T12:33:22.000Z</published>
    <updated>2022-11-06T12:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2414">P2414 [NOI2011] 阿狸的打字机</a></p><span id="more"></span><p>根据题意建出 Trie 。考虑 AC 自动机上一点 $p$ ，其子树内任意一点 $s$ 一定出现了 $p$ 表示的串。考虑离线，对于每一个点回答这个点作为 $y$ 的答案，对于每个 $x$ ，从根节点到 $y$ 节点上每一个在 $x$ 子树内都有贡献。在树上遍历维护从根开始的链，每次查询子树和用树状数组维护。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> p, fa, s[<span class="number">26</span>]; &#125; tr[N];</span><br><span class="line"><span class="keyword">int</span> n, m, tot, f[N], id[N], stmp, st[N], ed[N], ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span> <span class="keyword">int</span> id, x; <span class="built_in">Query</span> (<span class="keyword">int</span> _id, <span class="keyword">int</span> _x) : <span class="built_in">id</span>(_id), <span class="built_in">x</span>(_x) &#123; &#125; &#125;;</span><br><span class="line">vector &lt;Query&gt; g[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= stmp; x += x &amp; -x)</span><br><span class="line">        f[x] += k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; x; x -= x &amp; -x)</span><br><span class="line">        res += f[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span> <span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = ++stmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : e[u]) <span class="built_in">dfs1</span>(v);</span><br><span class="line">    ed[u] = stmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span> <span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(st[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (Query i : g[u])</span><br><span class="line">        ans[i.id] = <span class="built_in">query</span>(ed[i.x]) - <span class="built_in">query</span>(st[i.x] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tr[u].s[i] &amp;&amp; tr[tr[u].s[i]].p == u) <span class="built_in">dfs2</span>(tr[u].s[i]);</span><br><span class="line">    <span class="built_in">add</span>(st[u], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tr[<span class="number">0</span>].s[i]) q.<span class="built_in">push</span>(tr[<span class="number">0</span>].s[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;s = tr[p].s[i];</span><br><span class="line">            <span class="keyword">if</span> (!s) s = tr[tr[p].fa].s[i];</span><br><span class="line">            <span class="keyword">else</span> &#123; tr[s].fa = tr[tr[p].fa].s[i]; q.<span class="built_in">push</span>(s); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) e[tr[i].fa].<span class="built_in">eb</span>(i);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> s = ++tot;</span><br><span class="line">            tr[p].s[c - <span class="string">&#x27;a&#x27;</span>] = s, tr[s].p = p;</span><br><span class="line">            p = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;B&#x27;</span>) p = tr[p].p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;P&#x27;</span>) id[++n] = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>(); <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x, y); x = id[x], y = id[y];</span><br><span class="line">        g[y].<span class="built_in">eb</span>(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">write</span>(ans[i]), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2414&quot;&gt;P2414 [NOI2011] 阿狸的打字机&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="树状数组" scheme="https://rusunoi.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="AC自动机" scheme="https://rusunoi.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    <category term="NOI" scheme="https://rusunoi.github.io/tags/NOI/"/>
    
  </entry>
  
  <entry>
    <title>P4849 寻找宝藏</title>
    <link href="https://rusunoi.github.io/post/P4849/"/>
    <id>https://rusunoi.github.io/post/P4849/</id>
    <published>2022-11-06T08:06:01.000Z</published>
    <updated>2022-11-06T08:06:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4849">P4849 寻找宝藏</a></p><span id="more"></span><p>四维偏序，排序 + CDQ + CDQ + 树状数组 。一个问题：在这类用左侧信息更新右侧信息的问题中，必须将左侧完全计算完才能用于更新右侧，因此 CDQ 的顺序一定是中序遍历，这样就不能归并排序，用 $O(n \log n)$ 排序就会使复杂度增高，因此最后一层使用树状数组而非继续 CDQ ，复杂度可以保证为 $O(n \log ^ 3 n)$ 。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;L, <span class="keyword">int</span>&gt; PLI;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">8e4</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adj</span> <span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; x += x &gt;&gt; <span class="number">31</span> &amp; mod; &#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">PLI f[N], tr[N];</span><br><span class="line">PLI <span class="keyword">operator</span> + (PLI x, <span class="keyword">int</span> k) &#123; <span class="keyword">return</span> &#123; x.fi + k, x.se &#125;; &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">bool</span> op; <span class="keyword">int</span> a, b, c, d, v, id; &#125; w[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp4</span> <span class="params">(Node &amp;x, Node &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> x.d &lt; y.d || (x.d == y.d &amp;&amp; x.op &gt; y.op); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span> <span class="params">(Node &amp;x, Node &amp;y)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> x.c &lt; y.c || (x.c == y.c &amp;&amp; <span class="built_in">cmp4</span>(x, y)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span> <span class="params">(Node &amp;x, Node &amp;y)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> x.b &lt; y.b || (x.b == y.b &amp;&amp; <span class="built_in">cmp3</span>(x, y)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span> <span class="params">(Node &amp;x, Node &amp;y)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> x.a &lt; y.a || (x.a == y.a &amp;&amp; <span class="built_in">cmp2</span>(x, y)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chkmax</span> <span class="params">(PLI &amp;x, PLI k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k.fi &gt; x.fi) x = k;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k.fi == x.fi) <span class="built_in">adj</span>(x.se += k.se - mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, PLI k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= m; x += x &amp; -x)</span><br><span class="line">        <span class="built_in">chkmax</span>(tr[x], k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PLI <span class="title">query</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PLI res &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (; x; x -= x &amp; -x)</span><br><span class="line">        <span class="built_in">chkmax</span>(res, tr[x]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span> <span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= m; x += x &amp; -x)</span><br><span class="line">        tr[x] = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq2</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq2</span>(l, mid);</span><br><span class="line">    vector &lt;Node&gt; <span class="built_in">tmp</span> (w + l, w + r + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(w + l, w + mid + <span class="number">1</span>, cmp3), <span class="built_in">sort</span>(w + mid + <span class="number">1</span>, w + r + <span class="number">1</span>, cmp3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>; i &lt;= mid || j &lt;= r; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= mid &amp;&amp; (j &gt; r || !<span class="built_in">cmp3</span>(w[j], w[i])); ++i)</span><br><span class="line">            <span class="keyword">if</span> (w[i].op) <span class="built_in">add</span>(w[i].d, f[w[i].id]);</span><br><span class="line">        <span class="keyword">for</span> (; j &lt;= r &amp;&amp; (i &gt; mid || <span class="built_in">cmp3</span>(w[j], w[i])); ++j)</span><br><span class="line">            <span class="keyword">if</span> (!w[j].op) <span class="built_in">chkmax</span>(f[w[j].id], <span class="built_in">query</span>(w[j].d) + w[j].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i)</span><br><span class="line">        <span class="keyword">if</span> (w[i].op) <span class="built_in">clear</span>(w[i].d);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) w[i] = tmp[i - l];</span><br><span class="line">    <span class="built_in">cdq2</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq1</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq1</span>(l, mid);</span><br><span class="line">    vector &lt;Node&gt; <span class="built_in">tmp</span> (w + l, w + r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= mid; ++i) w[i].op = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">sort</span>(w + l, w + r + <span class="number">1</span>, cmp2);</span><br><span class="line">    <span class="built_in">cdq2</span>(l, r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) w[i] = tmp[i - l];</span><br><span class="line">    <span class="built_in">cdq1</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; ws;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(w[i].a, w[i].b, w[i].c, w[i].d, w[i].v);</span><br><span class="line">        ws.<span class="built_in">eb</span>(w[i].d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ws.<span class="built_in">begin</span>(), ws.<span class="built_in">end</span>());</span><br><span class="line">    m = ws.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ws.<span class="built_in">begin</span>(), ws.<span class="built_in">end</span>()), ws.<span class="built_in">end</span>()) - ws.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        w[i].d = <span class="built_in">upper_bound</span>(ws.<span class="built_in">begin</span>(), ws.<span class="built_in">end</span>(), w[i].d) - ws.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="built_in">sort</span>(w + <span class="number">1</span>, w + n + <span class="number">1</span>, cmp1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[w[i].id = i] = &#123; w[i].v, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="built_in">cdq1</span>(<span class="number">1</span>, n);</span><br><span class="line">    PLI res = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">chkmax</span>(res, f[i]);</span><br><span class="line">    <span class="built_in">write</span>(res.fi), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>), <span class="built_in">write</span>(res.se);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4849&quot;&gt;P4849 寻找宝藏&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="树状数组" scheme="https://rusunoi.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="分治" scheme="https://rusunoi.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>P3755 [CQOI2017]老C的任务</title>
    <link href="https://rusunoi.github.io/post/P3755/"/>
    <id>https://rusunoi.github.io/post/P3755/</id>
    <published>2022-11-03T13:22:15.000Z</published>
    <updated>2022-11-03T13:22:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3755">P3755 [CQOI2017]老C的任务</a></p><span id="more"></span><p>板子题。做法很多。较优的做法是 CDQ 分治、扫描线。这里挑战分块套树状数组。有多个 $x$ ，散块用 vector 排序后维护。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, L&gt; PIL;</span><br><span class="line"><span class="keyword">const</span> L inf = <span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">310</span>;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; wx, wy;</span><br><span class="line">vector &lt;PIL&gt; tr[N];</span><br><span class="line"><span class="keyword">int</span> tot, id[N], st[N], ed[N];</span><br><span class="line">L Tr[M][N];</span><br><span class="line"><span class="keyword">int</span> n, m, nx, ny, u[N], v[N], w[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span> <span class="params">(vector &lt;<span class="keyword">int</span>&gt; &amp;ws, <span class="keyword">int</span> *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ws.<span class="built_in">eb</span>(w[i]);</span><br><span class="line">    <span class="built_in">sort</span>(ws.<span class="built_in">begin</span>(), ws.<span class="built_in">end</span>());</span><br><span class="line">    ws.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ws.<span class="built_in">begin</span>(), ws.<span class="built_in">end</span>()), ws.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        w[i] = <span class="built_in">upper_bound</span>(ws.<span class="built_in">begin</span>(), ws.<span class="built_in">end</span>(), w[i]) - ws.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">return</span> ws.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= tot; i += i &amp; -i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= ny; j += j &amp; -j)</span><br><span class="line">            Tr[i][j] += k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">L <span class="title">query</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; -i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j -= j &amp; -j)</span><br><span class="line">            res += Tr[i][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">L <span class="title">calc</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="built_in">upper_bound</span>(wx.<span class="built_in">begin</span>(), wx.<span class="built_in">end</span>(), x) - wx.<span class="built_in">begin</span>();</span><br><span class="line">    y = <span class="built_in">upper_bound</span>(wy.<span class="built_in">begin</span>(), wy.<span class="built_in">end</span>(), y) - wy.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    L res = <span class="built_in">query</span>(id[x] - <span class="number">1</span>, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = st[id[x]]; i &lt;= x; ++i)</span><br><span class="line">        res += (--<span class="built_in">upper_bound</span>(tr[i].<span class="built_in">begin</span>(), tr[i].<span class="built_in">end</span>(), (PIL)&#123; y, inf &#125;))-&gt;se;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">read</span>(u[i], v[i], w[i]);</span><br><span class="line">    nx = <span class="built_in">get</span>(wx, u), ny = <span class="built_in">get</span>(wy, v);</span><br><span class="line">    <span class="keyword">int</span> B = nx / (M - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nx; ++i)</span><br><span class="line">        id[i] = (i - <span class="number">1</span>) / B + <span class="number">1</span>;</span><br><span class="line">    tot = id[nx];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">        st[i] = ed[i - <span class="number">1</span>] + <span class="number">1</span>, ed[i] = ed[i - <span class="number">1</span>] + B;</span><br><span class="line">    ed[tot] = nx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[u[i]].<span class="built_in">eb</span>(v[i], w[i]);</span><br><span class="line">        <span class="built_in">add</span>(id[u[i]], v[i], w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nx; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[i].<span class="built_in">eb</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(tr[i].<span class="built_in">begin</span>(), tr[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; tr[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            tr[i][j].se = tr[i][j - <span class="number">1</span>].se + tr[i][j].se;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x1, y1, x2, y2; m; --m, <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x1, y1, x2, y2); --x1, --y1;</span><br><span class="line">        <span class="built_in">write</span>(<span class="built_in">calc</span>(x2, y2) + <span class="built_in">calc</span>(x1, y1) - <span class="built_in">calc</span>(x1, y2) - <span class="built_in">calc</span>(x2, y1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3755&quot;&gt;P3755 [CQOI2017]老C的任务&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="树状数组" scheme="https://rusunoi.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="分块" scheme="https://rusunoi.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
    <category term="省选" scheme="https://rusunoi.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>P5363 [SDOI2019]移动金币</title>
    <link href="https://rusunoi.github.io/post/P5363/"/>
    <id>https://rusunoi.github.io/post/P5363/</id>
    <published>2022-11-02T00:38:21.000Z</published>
    <updated>2022-11-02T00:38:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5363">P5363 [SDOI2019]移动金币</a></p><span id="more"></span><p>阶梯 Nim 。先手必败当且仅当奇数位置异或和为 $0$ ，逐位考虑，DP 即可。最后剩下的位置给偶数位或者放弃，插板即可。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, f[<span class="number">2</span>][N];</span><br><span class="line"><span class="keyword">int</span> inv[N], fact[N], ifact[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> &amp;x, L k)</span> </span>&#123; x = (x + k) % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i)</span><br><span class="line">        inv[i] = -(L)(mod / i) * inv[mod % i] % mod;</span><br><span class="line">    fact[<span class="number">0</span>] = ifact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i] = (L)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        ifact[i] = (L)ifact[i - <span class="number">1</span>] * inv[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? <span class="number">0</span> : (L)fact[a] * ifact[b] % mod * ifact[a - b] % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(n, m); n -= m;</span><br><span class="line">    <span class="keyword">int</span> a = m + <span class="number">1</span> &gt;&gt; <span class="number">1</span>, b = m - a;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="built_in">C</span>(n + m, m);</span><br><span class="line">    <span class="keyword">bool</span> op = <span class="literal">false</span>;</span><br><span class="line">    f[op][n] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>, op ^= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) f[op ^ <span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="keyword">if</span> (f[op][i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j * k &lt;= i &amp;&amp; j &lt;= a; j += <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">add</span>(f[op ^ <span class="number">1</span>][i - j * k], (L)f[op][i] * <span class="built_in">C</span>(a, j));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">add</span>(res, -(L)f[op][i] * <span class="built_in">C</span>(i + b, b));</span><br><span class="line">    <span class="built_in">write</span>((res + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P5363&quot;&gt;P5363 [SDOI2019]移动金币&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="DP" scheme="https://rusunoi.github.io/tags/DP/"/>
    
    <category term="组合数学" scheme="https://rusunoi.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="博弈论" scheme="https://rusunoi.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="省选" scheme="https://rusunoi.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>P4576 [CQOI2013]棋盘游戏</title>
    <link href="https://rusunoi.github.io/post/P4576/"/>
    <id>https://rusunoi.github.io/post/P4576/</id>
    <published>2022-11-01T12:25:52.000Z</published>
    <updated>2022-11-01T12:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4576">P4576 [CQOI2013]棋盘游戏</a></p><span id="more"></span><p>总存在一些位置，黑色可以吃白色，而白色不能吃黑色。白色比较菜，胜利当且仅当开局第一步可以吃掉黑色。黑色考虑尽快赢，白色考虑最后输。对于所有决策取最优即可。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">21</span>, M = <span class="number">81</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, dy[] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> n, f[M][N][N][N][N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inside</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= n; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt;= M || !<span class="built_in">inside</span>(x1, y1) || !<span class="built_in">inside</span>(x2, y2)) <span class="keyword">return</span> t &amp; <span class="number">1</span> ? M : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 == y2) <span class="keyword">return</span> t &amp; <span class="number">1</span> ? <span class="number">0</span> : M;</span><br><span class="line">    <span class="keyword">int</span> &amp;res = f[t][x1][y1][x2][y2];</span><br><span class="line">    <span class="keyword">if</span> (res) <span class="keyword">return</span> res;</span><br><span class="line">    res = t &amp; <span class="number">1</span> ? <span class="number">0</span> : M;</span><br><span class="line">    <span class="keyword">if</span> (t &amp; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">dfs</span>(t + <span class="number">1</span>, x1 + dx[k], y1 + dy[k], x2, y2));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">2</span>; ++d)</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">dfs</span>(t + <span class="number">1</span>, x1, y1, x2 + dx[k] * d, y2 + dy[k] * d));</span><br><span class="line">    <span class="keyword">return</span> ++res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="built_in">read</span>(n, x1, y1, x2, y2);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(x1 - x2) + <span class="built_in">abs</span>(y1 - y2) == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;WHITE 1&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;BLACK %d&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>, x1, y1, x2, y2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4576&quot;&gt;P4576 [CQOI2013]棋盘游戏&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="博弈论" scheme="https://rusunoi.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="记忆化搜索" scheme="https://rusunoi.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
    <category term="省选" scheme="https://rusunoi.github.io/tags/%E7%9C%81%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>P4055 [JSOI2009] 游戏</title>
    <link href="https://rusunoi.github.io/post/P4055/"/>
    <id>https://rusunoi.github.io/post/P4055/</id>
    <published>2022-11-01T07:01:47.000Z</published>
    <updated>2022-11-01T07:01:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4055">P4055 [JSOI2009] 游戏</a></p><span id="more"></span><p>二分图博弈模板题。求所有存在情况不在最大匹配的点。对于每个点，如果删除，最大匹配就减少，那么一定在最大匹配中。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="literal">true</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">      x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">Rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, Rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>, M = <span class="number">110</span>;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line">PII p[N];</span><br><span class="line"><span class="keyword">int</span> T, vis[N];</span><br><span class="line"><span class="keyword">int</span> n, m, tot, id[M][M], f[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : g[u]) <span class="keyword">if</span> (vis[v] ^ T)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[v] = T;</span><br><span class="line">        <span class="keyword">if</span> (!f[v] || <span class="built_in">dfs</span>(f[v]))</span><br><span class="line">        &#123;</span><br><span class="line">            f[u] = v, f[v] = u;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) != <span class="string">&#x27;.&#x27;</span> &amp;&amp; c != <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            p[id[i][j] = ++tot] = &#123; i, j &#125;;</span><br><span class="line">            <span class="keyword">if</span> (id[i - <span class="number">1</span>][j])</span><br><span class="line">            &#123;</span><br><span class="line">                g[tot].<span class="built_in">eb</span>(id[i - <span class="number">1</span>][j]);</span><br><span class="line">                g[id[i - <span class="number">1</span>][j]].<span class="built_in">eb</span>(tot);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (id[i][j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                g[tot].<span class="built_in">eb</span>(id[i][j - <span class="number">1</span>]);</span><br><span class="line">                g[id[i][j - <span class="number">1</span>]].<span class="built_in">eb</span>(tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (p[i].fi + p[i].se &amp; <span class="number">1</span>) ++T, <span class="built_in">dfs</span>(i);</span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!f[i]) res.<span class="built_in">eb</span>(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = ++T;</span><br><span class="line">            <span class="keyword">int</span> t = f[i];</span><br><span class="line">            f[t] = f[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(t)) res.<span class="built_in">eb</span>(i);</span><br><span class="line">            <span class="keyword">else</span> f[t] = i, f[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;LOSE&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WIN&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : res)</span><br><span class="line">        <span class="built_in">write</span>(p[i].fi), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>), <span class="built_in">write</span>(p[i].se), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4055&quot;&gt;P4055 [JSOI2009] 游戏&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="博弈论" scheme="https://rusunoi.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="二分图的最大匹配" scheme="https://rusunoi.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>CF432D Prefixes and Suffixes</title>
    <link href="https://rusunoi.github.io/post/CF432D/"/>
    <id>https://rusunoi.github.io/post/CF432D/</id>
    <published>2022-10-31T07:57:28.000Z</published>
    <updated>2022-10-31T07:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF432D">LuoGu: CF432D Prefixes and Suffixes</a></p><p><a href="https://codeforces.com/problemset/problem/432/D">CF: D. Prefixes and Suffixes</a></p><span id="more"></span><p>求出 Z函数，合法当且仅当 $z _ i &#x3D; n - i$ 。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n, f[N], g[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t + f[t] &gt; i) f[i] = <span class="built_in">min</span>(f[i - t], t + f[t] - i);</span><br><span class="line">        <span class="keyword">while</span> (i + f[i] &lt; n &amp;&amp; s[f[i]] == s[i + f[i]]) ++f[i];</span><br><span class="line">        <span class="keyword">if</span> (i + f[i] &gt; t + f[t]) t = i;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ++g[f[i]];</span><br><span class="line">        <span class="keyword">if</span> (f[i] == n - i) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) g[i] += g[i + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i)</span><br><span class="line">        <span class="keyword">if</span> (f[i] == n - i) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, f[i], g[f[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/CF432D&quot;&gt;LuoGu: CF432D Prefixes and Suffixes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/432/D&quot;&gt;CF: D. Prefixes and Suffixes&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="Z函数" scheme="https://rusunoi.github.io/tags/Z%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Z 函数模板</title>
    <link href="https://rusunoi.github.io/post/Z-Function-Template/"/>
    <id>https://rusunoi.github.io/post/Z-Function-Template/</id>
    <published>2022-10-31T06:26:52.000Z</published>
    <updated>2022-10-31T06:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>扩展 KMP 。将所有后缀和一个串匹配。</p><span id="more"></span><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t + f[t] &gt; i) f[i] = <span class="built_in">min</span>(f[i - t], t + f[t] - i);</span><br><span class="line">        <span class="keyword">while</span> (i + f[i] &lt; m &amp;&amp; B[f[i]] == B[i + f[i]]) ++f[i];</span><br><span class="line">        <span class="keyword">if</span> (i + f[i] &gt; t + f[t]) t = i;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t + g[t] &gt; i) g[i] = <span class="built_in">min</span>(f[i - t], t + g[t] - i);</span><br><span class="line">        <span class="keyword">while</span> (g[i] &lt; m &amp;&amp; i + g[i] &lt; n &amp;&amp; B[g[i]] == A[i + g[i]]) ++g[i];</span><br><span class="line">        <span class="keyword">if</span> (i + g[i] &gt; t + g[t]) t = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (g[<span class="number">0</span>] &lt; n &amp;&amp; g[<span class="number">0</span>] &lt; m &amp;&amp; A[g[<span class="number">0</span>]] == B[g[<span class="number">0</span>]]) ++g[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;扩展 KMP 。将所有后缀和一个串匹配。&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="模板" scheme="https://rusunoi.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="Z函数" scheme="https://rusunoi.github.io/tags/Z%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>P3480 [POI2009]KAM-Pebbles</title>
    <link href="https://rusunoi.github.io/post/P3480/"/>
    <id>https://rusunoi.github.io/post/P3480/</id>
    <published>2022-10-26T01:00:12.000Z</published>
    <updated>2022-10-26T01:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3480">P3480 [POI2009]KAM-Pebbles</a></p><span id="more"></span><p>注意到个数不能少于前一个的限制，考虑差分，在 $x$ 处取石子相当在差分序列上 $x$ 的石子移动到 $x + 1$ ，即反向的 StairCase Nim 。套结论即可。</p><details><summary> 查看代码 </summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        c == <span class="string">&#x27;-&#x27;</span> &amp;&amp; (flag = <span class="literal">true</span>);</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    flag &amp;&amp; (x = ~x + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>, <span class="keyword">class</span> ...<span class="title">rest</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span> <span class="params">(Type &amp;x, rest &amp;...y)</span> </span>&#123; <span class="built_in">read</span>(x), <span class="built_in">read</span>(y...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span> <span class="params">(Type x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x &lt; <span class="number">0</span> &amp;&amp; (<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = ~x + <span class="number">1</span>);</span><br><span class="line">    x &gt; <span class="number">9</span> &amp;&amp; (<span class="built_in">write</span>(x / <span class="number">10</span>), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, w[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">read</span>(w[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) w[i] -= w[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) s ^= w[n - i + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">puts</span>(s ? <span class="string">&quot;TAK&quot;</span> : <span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3480&quot;&gt;P3480 [POI2009]KAM-Pebbles&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="OI" scheme="https://rusunoi.github.io/categories/OI/"/>
    
    
    <category term="博弈论" scheme="https://rusunoi.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
</feed>
